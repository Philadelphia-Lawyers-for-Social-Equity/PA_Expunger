import re
from pathlib import Path

import pytest
from docket_parser import extraction
from pypdf.errors import PdfReadError

logger_name = extraction.__name__


class TestDocketExtraction:
    test_data_dir = Path(__file__).parent.joinpath("data")
    test_docket_paths = test_data_dir.joinpath("dockets").glob("*.pdf")

    def test_warn_not_crystal_report(self, caplog):
        """Ensure that there is a logged warning when trying to extract text from a docket not generated by
         Crystal Reports. 'Crystal Reports' should be in that warning message."""
        not_crystal_reports_path = [path for path in self.test_docket_paths if 'not_crystal' in path.name][0]
        with caplog.at_level("WARNING", logger_name):
            extraction.DocketReader(not_crystal_reports_path)
        assert any("Crystal Reports" in msg for msg in caplog.messages), \
            "DocketReader should warn when metadata does not indicate the file is generated by Crystal Reports"

    def test_proper_output_format(self):
        for test_file_path in self.test_docket_paths:
            reader = extraction.DocketReader(test_file_path)
            extracted_text = reader.extract_text()
            lines = extracted_text.split(reader.terminator)
            assert lines[-1] == '', "Extracted text should end with terminator character"

            escaped_close = re.escape(reader.properties_close)
            properties_regex = r"[0-9]{3}\.[0-9]{2},[0-9]{3}\.[0-9]{2},(normal|bold)" + escaped_close
            for line in lines[:-1]:
                split_line = line.split(reader.properties_open)
                assert len(split_line) == 2, \
                    "Reader properties_open character should appear exactly once in each line"
                content, properties = split_line
                assert reader.properties_close not in content, \
                    "Reader properties_close should not appear before properties_open"

                match = re.match(properties_regex, properties)
                assert len(match.groups()) == 1, "Correctly formatted properties should appear once on each line."

    def test_error_if_special_char_in_pdf(self):
        test_content_characters = 'ยง aA,.:$/'
        for test_file in self.test_docket_paths:
            for test_content_character in test_content_characters:
                extraction.DocketReader.tab = test_content_character
                with pytest.raises(expected_exception=PdfReadError):
                    extraction.DocketReader(test_file)
